" Options {{{1
if has('nvim')
    " setup 'rtp' *before* `:filetype plugin` because it uses `:runtime`
    set runtimepath^=~/.vim
    set runtimepath+=~/.vim/after
    let &packpath = &runtimepath
endif

syntax enable
filetype plugin indent on

if has('nvim')
    " !    - Save and restore all-caps global variables
    " '200 - Marks will be remembered for the last 200 files edited (also the number of `v:oldfiles` stored)
    " <50  - Contents of registers (up to 50 lines each) will be remembered
    " s10  - Items with contents occupying more then 10 KiB are skipped
    " h    - Disable the effect of 'hlsearch' when loading the shada file
    set shada=!,'200,<50,s10,h 
else
    set viminfo=!,'200,<50,s10,h
    set viminfofile=~/.viminfo
endif

if !has('nvim')
    " See :set termcap, :h t_ku, :h :set-termcap, and http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
    set <a-h>=h
    set <a-j>=j
    set <a-k>=k
    set <a-l>=l
    if $TERM =~# '^\%(tmux\|screen\)'
        set ttymouse=xterm2
        " Make bracketed paste mode work inside tmux
        let &t_BE = "\033[?2004h"
        let &t_BD = "\033[?2004l"
        let &t_PS = "\033[200~"
        let &t_PE = "\033[201~"
    endif
    set ttyfast
endif

if has('nvim')
    set display=msgsep
    set inccommand=nosplit
else
    set display=lastline
endif

set lazyredraw
set ttimeout
set ttimeoutlen=0  " avoid confusing <esc>-key with <a-â€¦>
set timeoutlen=3000
set mouse=a
set synmaxcol=250

if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif
" Show block cursor in Normal mode and line cursor in Insert mode
let &t_ti.="\<Esc>[2 q"
let &t_SI.="\<Esc>[6 q"
let &t_SR.="\<Esc>[4 q"
let &t_EI.="\<Esc>[2 q"
let &t_te.="\<Esc>[0 q"

set hidden
set confirm
set noswapfile nobackup
set undofile
set undodir=~/.vim/undo
if !isdirectory(&undodir)
    call mkdir(&undodir, 'p', 0700)
endif

set splitright
set splitbelow

set backspace=indent,eol,start
set nojoinspaces

set autoindent
set shiftround
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=-1

set hlsearch
set incsearch
set ignorecase
set infercase
set smartcase

set keywordprg=:help
" set completeopt=menu
set complete=.,i,w,b

set wildmenu
set wildignorecase
set wildignore&vim
set wildignore+=build/*,*/node_modules/*

set foldtext=v:folddashes.getline(v:foldstart)
set foldmethod=marker
set foldlevelstart=0
set foldopen-=block

set nomodeline
set modelines=0

set shortmess&vim
set shortmess+=aTWIcFS
set shortmess-=s

set scrolloff=2
set sidescrolloff=2
set virtualedit=block
set nowrap

set listchars=tab:â€º\ ,trail:-,nbsp:âˆ…
set fillchars=fold:\ 

set number
set signcolumn=no
set noshowcmd

if executable('rg')
    set grepprg=rg\ -i\ --vimgrep
else
    set grepprg=grep\ --line-number\ --with-filename\ --recursive\ -I\ $*\ /dev/null
endif
set grepformat=%f:%l:%c:%m
" }}}1
" Status Line {{{1
set laststatus=2
set noshowmode
let s:stl_info = "%1*%{!&modifiable?'  X ':&ro?'  RO ':''}%2*%{&modified?'  + ':''}%* "
let s:stl_sess = "%6*%{session#status()}%*"

if has('nvim-0.5')
    " TODO: why does buf_diagnostics_count() sometimes return nil??
    lua <<
    _G.lsp_statusline_no_errors = function ()
        if vim.tbl_isempty(vim.lsp.buf_get_clients(0)) then
            return ''
        end
        local errors = vim.lsp.util.buf_diagnostics_count('Error') or 0
        if errors == 0 then
            return 'âœ”'
        end
        return ''
    end
    _G.lsp_statusline_has_errors = function ()
        if vim.tbl_isempty(vim.lsp.buf_get_clients(0)) then
            return ''
        end
        local errors = vim.lsp.util.buf_diagnostics_count('Error') or 0
        if errors > 0 then
            return 'âœ˜'
        end
        return ''
    end
.
    fu! MyStatusLineNeovim() abort
        let stl_lsp = "%3*%{v:lua.lsp_statusline_no_errors()}"..
                    \"%4*%{v:lua.lsp_statusline_has_errors()}%*"
        return s:stl_info.."%f "..stl_lsp.."%="..s:stl_sess..' '
    endfu
    set statusline=%!MyStatusLineNeovim()
else
    set statusline=%!MyStatusLine()
endif

fu! MyStatusLine() abort
    return s:stl_info.."%f %="
endfu

"
" Tab line
"
set showtabline=1
set tabline=%!MyTabLine()

fu! MyTabLine()
    let s = ''
    for i in range(1, tabpagenr('$'))
        let s .= i == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
        let s .= '%'.i.'T %{MyTabLabel('.i.')}'
    endfor
    return s.'%#TabLineFill#%T'
endfu

fu! MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let modified = ''
    for b in buflist
        if getbufvar(b, '&modified')
            let modified = '+ '
            break
        endif
    endfor
    let name = fnamemodify(bufname(buflist[tabpagewinnr(a:n) - 1]), ':t:s/^$/[No Name]/')
    return modified.name.' '
endfu
" }}}1
" Autocmds {{{1
aug vimrc | au!
    au BufReadPre * call s:handle_large_buffer()

    fu! s:handle_large_buffer() abort
        let s = getfsize(expand('<afile>'))
        if s > g:LargeFile || s == -2
            call s:large_buf(expand('<afile>:p'))
        endif
    endfu

    let g:LargeFile = 1024*1024 " 1MB

    fu! s:large_buf(name)
        let b:my_large_file = 1
        syntax clear
        set ei=all
        let &backupskip .= ',' . a:name
        setl foldmethod=manual nofoldenable noswapfile noundofile
        aug large_buffer | au!
            au BufWinEnter <buffer> 
                        \ set ei&vim |
                        \ au! large_buffer |
                        \ aug! large_buffer
        aug END
    endfu

    au BufNewFile * call s:maybe_read_template()
                \ | call s:maybe_make_executable()

    fu! s:maybe_make_executable() abort
        au BufWritePost <buffer> ++once call s:make_executable()
    endfu

    fu! s:make_executable() abort
        let shebang = matchstr(getline(1), '^#!\S\+')
        if !empty(shebang)
            sil call system('chmod +x ' .. expand('<afile>:p:S'))
            if v:shell_error
                echohl ErrorMsg
                echom 'Cannot make file executable: ' .. v:shell_error
                echohl None
            endif
        endif
    endfu

    fu! s:maybe_read_template() abort
        for file in glob('~/.vim/templates/*', 0, 1)
            let filetype = fnamemodify(file, ':t:r')
            if filetype is# &ft && filereadable(file)
                exe 'keepalt read' fnameescape(file)
                keepj 1d_
                return
            endif
        endfor
    endfu

    au BufWritePre,FileWritePre * call s:maybe_create_directories()

    fu! s:maybe_create_directories() abort
        if @% !~# '\(://\)'
            call mkdir(expand('<afile>:p:h'), 'p')
        endif
    endfu

    au BufReadPost * call s:maybe_restore_cursor_position()

    fu! s:maybe_restore_cursor_position() abort
        if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit'
            exe 'norm! g`"zvzz'
        endif
    endfu

    au FileType * call s:setup_formatting()

    " t  - auto-wrap text using textwidth
    set formatoptions-=t

    fu! s:setup_formatting()
        " r  - insert comment leader after hitting <enter>
        " o  - insert comment leader after hitting 'o' or 'O'
        " j  - remove comment leader when joining lines
        " c  - auto-wrap comments using textwidth
        " n  - indent numbered lists specially
        setl formatoptions-=ro
        setl formatoptions+=jcn
        if &textwidth is 0
            setl textwidth=80
        endif
    endfu

    if exists('##TerminalWinOpen')
        au TerminalWinOpen * setl statusline=%f
    elseif exists('##TerminalOpen')
        au TerminalOpen * setl statusline=%f
    elseif exists('##TermOpen')
        au TermOpen * setl statusline=%f
    endif

    " Warning: any BufWritePost autocmd after this will not get run when
    " writing vimrc, because sourcing the vimrc will clear the augroup
    au BufWritePost ~/.vim/vimrc exe 'source' expand('<afile>:p')
    au BufWritePost ~/.vim/lua/* exe 'luafile' expand('<afile>:p')
    au BufWritePost */colors/*.vim exe 'so' expand('<afile>:p') | exe (has_key(g:, 'colors_name') ? 'colo ' .. g:colors_name : '')
    au BufWritePost *tmux.conf         
                \ call system('tmux source-file '.expand('<afile>:p')) |
                \ if v:shell_error |
                \     echohl ErrorMsg |
                \     echo 'tmux source-file failed' |
                \     echohl None |
                \ endif
    " au BufWritePost ~/.zsh/overlay.ini call system('fast-theme '.expand('<afile>:p'))

    if has('nvim-0.5')
        au TextYankPost * lua vim.highlight.on_yank {hlgroup="IncSearch", timeout=300, on_visual=false}
    endif

    au CursorMoved * call HlSearch()
    au InsertEnter * call StopHL()

    fu! HlSearch()
        " bail out if cursor is at top/bottom of window
        let wininfo = getwininfo(win_getid())[0]
        let lnum = getcurpos()[1]
        if lnum == wininfo.botline - &scrolloff || lnum == wininfo.topline + &scrolloff
            return
        endif

        try
            let pos = match(getline('.'), @/, col('.') - 1) + 1
            if pos != col('.')
                call StopHL()
            endif
        catch
            call StopHL()
        endtry
    endfu

    fu! StopHL()
        if !v:hlsearch || mode() isnot# 'n'
            return
        endif
        sil call feedkeys("\<Plug>(StopHL)", 'm')
    endfu

    no <silent> <Plug>(StopHL) :<C-U>nohlsearch<cr>
    no! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]

    if has('nvim')
        au vimrc VimEnter * call s:setup_global_marks()

        fu! s:setup_global_marks()
        endfu

        fu! s:setup_global_mark(mark, file)
            let file = fnamemodify(a:file, ':p')
            if glob(file, 1) is# '' | return | endif
            let buf = bufnr(file, 1)
            " weirdly, setting the mark at column 2 saves as column 1 in shada
            call setpos(a:mark, [buf, 1, 2, 0])
        endfu

        " jump to last cursor position for capital letter marks
        for c in map(range(65, 90), 'nr2char(v:val)')
            exe "nno '"..c.." '"..c..'g`"zvzz'
        endfor
    endif
aug END
" }}}1
" Commands {{{1
if !exists('s:SID')
    fu! s:SID() abort
        return str2nr(matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$'))
    endfu
    let s:SID = printf('<SNR>%d_', s:SID())
    delfu s:SID
endif

com! -bar -nargs=* -complete=file_in_path Grep call <sid>grep(<f-args>)

fu! s:grep(...) abort
    if a:0 == 0
        return
    endif
    let cwd = getcwd()
    let path = a:0 > 1 && a:000[-1] is# '%' ? expandcmd(a:000[-1]) : ''
    if cwd =~# '^/data/users/'.$USER.'/www'
        let cmd = 'tbgsw --color=off --limit=500 --stripdir --ignore-case '
        if !empty(path)
            if path[-1:] is# '/'
                let path = path[:-2]
            endif
            let cmd .= '--forcedir '.shellescape(path).' '
            let cmd .= shellescape(join(a:000[:-2], ' '))
        else
            let cmd .= shellescape(join(a:000, ' '))
        endif
    else
        let cmd = 'rg -i --vimgrep '
        if !empty(path)
            let cmd .= shellescape(join(a:000[:-2], ' '))
            let cmd .= ' ' .. shellescape(path)
        else
            let cmd .= shellescape(join(a:000, ' '))
        endif
    endif
    call luaeval("require'my.isearch'.grep(_A)", cmd)
endfu

com! -bar -nargs=1 PackInstall call <sid>pack_install(<q-args>)

fu! s:pack_install(url)
    let url = a:url
    if url =~ '/$'
        let url = url[:-2]
    endif
    if url !~ '.git$'
        let url .= '.git'
    endif
    let repo = substitute(url, '^.*/\([^/]\+\)/\?\.git$', '\1', '')
    if strlen(repo) is strlen(url)
        echom 'regex failed'
        return
    endif
    " FIXME: git expands the tilde
    let cmd = printf('git submodule add --depth 1 --name "%s" -- %s ~/.vim/pack/mine/start/%s', repo, shellescape(url), repo)

    exe '!(cd ~ && '.cmd.')'
endfu

com! -bar DiffOrig echo s:diff_orig()

fu! s:diff_orig() abort
    let cole_save = &l:conceallevel
    setl conceallevel=0

    let tempfile = tempname()..'/Original File'
    exe 'vnew '..tempfile
    setl buftype=nofile nobuflisted noswapfile nowrap

    sil 0r ++edit #
    keepj $d_
    setl nomodifiable readonly

    diffthis
    nno <buffer><expr><nowait><silent> q reg_recording() isnot# '' ? 'q' : ':<c-u>q<cr>'
    let &filetype = getbufvar('#', '&ft')

    let s:tmp_partial = function('s:diff_orig_restore_settings', [cole_save])
    aug diff_orig_restore_settings
        au! * <buffer>
        au BufWipeOut <buffer>  call timer_start(0, s:tmp_partial)
    aug END

    exe winnr('#')..'windo diffthis'
    return ''
endfu

fu! s:diff_orig_restore_settings(conceallevel,_) abort
    exe 'setl conceallevel='..a:conceallevel
    diffoff!
    norm! zvzz
    aug! diff_orig_restore_settings
    unlet s:tmp_partial
endfu
" }}}1
" Mappings {{{1
let mapleader = "\<s-f5>"
let maplocalleader = "\<s-f6>"

no j gj
no k gk
no <down> gj
no <up> gk
nno <c-e> <c-e><c-e>
nno <c-y> <c-y><c-y>
xno < <gv
xno > >gv
nno s "_s
nno Z zzzH
xno Z zzzH
nno <expr> p getreg(v:register) =~# "\n" ? "pmv=g']g`v" : 'p'
nno <expr> P getreg(v:register) =~# "\n" ? "Pmv=g']g`v" : 'P'
xno <expr> p '"_c<c-r>'.v:register.'<esc>'

xno K k
xno J j

nno ; :
xno ; :
nno : ;
xno : ;

nno Q @q
no Y y$
no H ^
no L $
nno <c-p> <c-i>
nno <silent> <home> :<c-u>keepj norm! gg<cr>
nno <silent> <end> :<c-u>keepj norm! G<cr>
nno <silent> <pageup> <pageup>:keepj norm! H<cr>
nno <silent> <pagedown> <pagedown>:keepj norm! L<cr>

nno / ms/
nno ? ms?
nno ` g`
nno ' g'
no  <silent> (  H
no  <silent> )  L
nno <silent> (  :<c-u>keepj norm! H<cr>
nno <silent> )  :<c-u>keepj norm! L<cr>
nno <silent> M  :<c-u>keepj norm! M<cr>
nno <silent> {  :<c-u>keepj norm! {<cr>
nno <silent> }  :<c-u>keepj norm! }<cr>
nno <silent> gg :<c-u>keepj norm! gg<cr>
nno <silent> G  :<c-u>keepj norm! G<cr>
nno <silent> n  :<c-u>keepj norm! nzzzv<cr>
nno <silent> N  :<c-u>keepj norm! Nzzzv<cr>

nno <silent> *  ms:keepj norm! *<cr>zzzv
nno <silent> #  ms:keepj norm! #<cr>zzzv
nno <silent> g* ms:keepj norm! g*<cr>zzzv
nno <silent> g# ms:keepj norm! g#<cr>zzzv
" XXX: doesn't support multiline selection
xno <silent> *  "vyms:let @/='<c-r>v'<bar>keepj norm! n<cr>zzzv
xno <silent> #  "vyms:let @/='<c-r>v'<bar>keepj norm! N<cr>zzzv
xno <silent> g* "vyms:let @/='\<<c-r>v\>'<bar>keepj norm! n<cr>zzzv
xno <silent> g# "vyms:let @/='\<<c-r>v\>'<bar>keepj norm! N<cr>zzzv
nno <silent> g/ ms:<c-u>let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>:set hls<cr>
nno <silent> <rightmouse> <leftmouse>:<c-u>let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>:set hls<cr>

nno <silent> S ms:<c-u>let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>:%s///g<left><left>a<bs>

nno =v mvg'[=g']g`v

nno gs gv
nno gv g`[vg`]
nno gV g'[Vg']

no! <a-h> <left>
no! <a-l> <right>
no! <a-j> <c-left>
no! <a-k> <c-right>

nno <c-l> <c-w>l
nno <c-h> <c-w>h
nno <c-j> <c-w>j
nno <c-k> <c-w>k

nno <a-l> <c-w>L
nno <a-h> <c-w>H
nno <a-j> <c-w>J
nno <a-k> <c-w>K

nno <silent> ]b :<c-u>bnext<cr>
nno <silent> [b :<c-u>bprev<cr>
nno <silent> [t :<c-u>tabprev<cr>
nno <silent> ]t :<c-u>tabnext<cr>
nno <silent> ]T :<c-u>+tabmove<cr>
nno <silent> [T :<c-u>-tabmove<cr>
nno <silent> ]n /\v^[<\|=>]{7}<cr>zvzz
nno <silent> [n ?\v^[<\|=>]{7}<cr>zvzz
xno <silent> ]n /\v^[<\|=>]{7}<cr>zvzz
xno <silent> [n ?\v^[<\|=>]{7}<cr>zvzz

nno <expr> [e <sid>move_line_setup('up')
nno <expr> ]e <sid>move_line_setup('down')

fu! s:move_line_setup(dir) abort
    let s:move_line = {'dir': a:dir}
    let &opfunc = s:SID .. 'move_line'
    return 'g@l'
endfu

" FIXME: v:count1 doesn't work if indenting
fu! s:move_line(_) abort
    let dir = s:move_line.dir
    keepj norm! mv
    exe 'move' (dir is# 'up' ? '--' : '+') .. v:count1
    keepj norm! =`v
endfu

nno <silent> ]q :<c-u><c-r>=v:count1<cr>cnext<cr>zz
nno <silent> [q :<c-u><c-r>=v:count1<cr>cprevious<cr>zz
nno <silent> ]Q :<c-u>cnfile<cr>zz
nno <silent> [Q :<c-u>cpfile<cr>zz
nno <silent> ]l :<c-u><c-r>=v:count1<cr>lnext<cr>zz
nno <silent> [l :<c-u><c-r>=v:count1<cr>lprevious<cr>zz
nno <silent> ]L :<c-u>lnfile<cr>zz
nno <silent> [L :<c-u>lpfile<cr>zz

if has('nvim-0.5')
    no <silent> <space>o <cmd>lua require'my.isearch'.search_oldfiles()<cr>
    no <silent> <space>b <cmd>lua require'my.isearch'.search_buffers()<cr>
    no <silent> <space>f <cmd>lua require'my.isearch'.search_files()<cr>
endif

no <silent> <space>d :<c-u>BD<cr>
no <silent> <space>D :<c-u>bd<cr>
no <silent> <space>q :<c-u>b#<cr>

com! -bar -range CopyDiffusion <line1>,<line2> call my_fb#copy_diffusion_url()

nno <silent> <space>gd :<c-u>.CopyDiffusion<cr>
xno <silent> <space>gd :CopyDiffusion<cr>
nno <silent> <space>gl :<c-u>call my_find#hg_commit()<cr>

nno <silent> <space>ev :<c-u>edit ~/.vim/vimrc<cr>
nno <silent> <space>el :<c-u>edit ~/.vim/lua/my<cr>
nno <silent> <space>ep :<c-u>edit ~/.vim/pack/mine/start<cr>
nno <silent> <space>ez :<c-u>edit ~/.zshrc<cr>
nno <silent> <space>ec :<c-u>edit ~/.vim/pack/mine/start/gruvburn/gruvburn.colortemplate<cr>
nno <silent> <space>en :<c-u>edit ~/notes/notes.md<cr>
nno <silent> <space>et :<c-u>edit ~/.config/tmux/tmux.conf<cr>
nno <silent> <space>ea :<c-u>edit ~/.config/alacritty/alacritty.yml<cr>

nno <space>a :<c-u>Grep<space>
xno <space>a "vy:Grep <c-r>v
xno <space>m :<c-u>make<cr>

cno <c-p> <up>
cno <c-n> <down>
cno <c-j> <c-g>
cno <c-k> <c-t>
cno <c-a> <home>

ino <expr> <c-y> pumvisible() ? "\<c-y>" : matchstr(getline(line('.')-1), '\%' . virtcol('.') . 'v\%(\k\+\\|.\)')

ino <c-o> <c-r>=expand("%:t:r:r:r")<cr>
cno <c-o> <c-r>=expand("%:t:r:r:r")<cr>
nno <silent> yo :<c-u>let @"='<c-r>=expand("%:t:r:r:r")<cr>'<cr>
nno <silent> yO :<c-u>let @"='<c-r>=expand("%:p")<cr>'<cr>

nno <silent> cd :<c-u>cd %:h \| pwd<cr>
nno <space>W :<c-u>w !sudo tee % >/dev/null<cr>
nno <silent> <space>t :<c-u>tabedit<cr>
no  <silent> <space>y y:<c-u>call my_fb#yank(@0)<cr>

nno <silent> <space>l :<c-u>vsplit<cr>
nno <silent> <space>j :<c-u>split<cr>
nno <silent> <space>h :<c-u>vsplit<bar>wincmd p<cr>
nno <silent> <space>k :<c-u>split<bar>wincmd p<cr>

nno <silent> <c-q> :<c-u>q<cr>

nno <space>s :<c-u>%s///g<left><left>a<bs>

nno g; g;zvzz
xm <expr> gd mode() is# 'V' ? '"vygvgc"vP' : 'gd'

cnorea <expr> man getcmdtype() is# ":" && getcmdpos() == 4 ? 'Man' : 'man'
cnorea <expr>  hg getcmdtype() is# ':' && getcmdpos() == 3 ? 'helpgrep' : 'hg'
cnorea <expr>  ht getcmdtype() is# ':' && getcmdpos() == 3 ? 'helptags' : 'ht'
cnorea <expr>  cs getcmdtype() is# ':' && getcmdpos() == 3 ? 'colorscheme' : 'cs'
" TODO: immediately expand
ca ~? ~/

fu! s:map_change_option(...)
    let [key, opt] = a:000[0:1]
    let op = get(a:, 3, 'set '.opt.'!')
    exe 'nno <silent> co'.key.' :'.op.'<cr>'
endfu

call s:map_change_option('n', 'number')
call s:map_change_option('c', 'cursorline')
call s:map_change_option('b', 'background', 'let &background = &background is# "dark" ? "light" : "dark"<bar>redraw')
call s:map_change_option('w', 'wrap')
call s:map_change_option('l', 'hlsearch')
call s:map_change_option('i', 'ignorecase')

nno <silent> <space>z :<c-u>call <sid>zoom_toggle()<cr>

fu! s:zoom_toggle() abort
    if winnr('$') == 1 | return | endif
    if exists('t:zoom_restore')
        exe t:zoom_restore
        unlet t:zoom_restore
    else
        let t:zoom_restore = winrestcmd()
        wincmd |
        wincmd _
    endif
endfu

"
" adapted from justinmk's init.vim
"
xno <expr> I (mode()=~#'[vV]'?'<C-v>^o^I':'I')
xno <expr> A (mode()=~#'[vV]'?'<C-v>0o$A':'A')

nno gqax :%!tidy -q -i -xml -utf8<cr>
nno gqah :%!tidy -q -i -ashtml -utf8<cr>
nno gqaj :%!python -m json.tool<cr>
nno gwaj :call append('$', json_encode(eval(join(getline(1,'$')))))<cr>'[k"_dVgg:%!python -m json.tool<cr>

nno <silent> g> :set nomore<bar>echo repeat("\n",&cmdheight)<bar>40messages<bar>set more<CR>

"
" adapted from lacygoill's vimrc
"
nno <expr> <space>. <sid>repeat_last_edit_on_last_changed_text()

fu! s:repeat_last_edit_on_last_changed_text() abort
    " put the last changed text inside the search register, so that we can refer
    " to it with the text-object `gn`
    let changed = getreg('"', 1, 1)
    if empty(changed) | return | endif
    call map(changed, {_,v -> escape(v, '\')})
    if len(changed) == 1
        let pat = changed[0]
    else
        " can't join with real newlines: they would be translated as NULs in the search register
        " we need to join with the *atom* `\n`
        let pat = changed->join('\n')
    endif
    call setreg('/', '\V'..pat, 'c')
    set hlsearch
    return "cgn\<c-@>"
    "          â”œâ”€â”€â”€â”€â”˜
    "          â”” insert the previously inserted text and stop insert
endfu

" search only in visual selection
xno <silent> / :<c-u>call <sid>visual_slash()<cr>

fu! s:visual_slash() abort
    if line("'<") == line("'>")
        call feedkeys('gv/', 'in')
    else
        " Do not reselect the visual selection with `gv`.{{{
        "
        " It could make move the end of the selection when you type some pattern
        " which matches inside.  That's not what we want.
        " We want to search  in the last visual selection as  it was defined; we
        " don't want to redefine it in the process.
        "}}}
        call feedkeys('/\%V', 'in')
    endif
endfu

" repeat last edit on all the visually selected lines with dot
xno <silent> . :norm! .<cr>

" TextObjects {{{2
" text-object: a comment (adapted from junegunn's vimrc)
omap <silent> ac :<C-U>call <SID>inner_comment(0)<CR>

function! s:inner_comment(vis)
    if synIDattr(synID(line('.'), col('.'), 0), 'name') !~? 'comment'
        return
    endif

    let origin = line('.')
    let lines = []
    for dir in [-1, 1]
        let line = origin
        let line += dir
        while line >= 1 && line <= line('$')
            execute 'normal!' line.'G^'
            if synIDattr(synID(line('.'), col('.'), 0), 'name') !~? 'comment'
                break
            endif
            let line += dir
        endwhile
        let line -= dir
        call add(lines, line)
    endfor

    execute 'normal!' lines[0].'GV'.lines[1].'G'
endfunction
" }}}2
" }}}1
" Plugins {{{1
" Disabled Vim plugins {{{2
let g:loaded_getscriptPlugin = 1
let g:loaded_logiPat = 1
let g:loaded_rrhelper = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimballPlugin = 1
let g:loaded_vimball = 1
let g:loaded_zipPlugin = 1
let g:loaded_netrwPlugin = 1
let g:loaded_matchit = 1

let g:did_install_default_menus = 1 " $VIMRUNTIME/menu.vim

if has('nvim')
    let g:loaded_python_provider = 0
    let g:loaded_perl_provider = 0
    let g:loaded_ruby_provider = 0
    let g:loaded_node_provider = 0
endif
" }}}2

" vim-prettier
let g:prettier#autoformat = 1

" vim-colortemplate
let g:colortemplate_no_mappings = 0
let g:colortemplate_source_comment = 0
let g:colortemplate_toolbar = 0
au vimrc BufWritePost *.colortemplate ColortemplateAll! | exe (has_key(g:, 'colors_name') ? 'colo ' .. g:colors_name : '')
com! -bar HiTest runtime syntax/hitest.vim
nno <silent> cos :<c-u>call colortemplate#syn#toggle()<bar>echo<cr>

" vim-qf
nm <c-n> <Plug>(qf_qf_toggle)
let g:qf_auto_quit = 0
let g:qf_auto_resize = 0
let g:qf_mapping_ack_style = 1

" vim-dirvish
let g:dirvish_mode = ':sort ,^.*/,'

" vim-bufkill
let g:BufKillCreateMappings = 0

" vim-linediff
let g:linediff_buffer_type = 'scratch'
xno <expr> D mode() is# 'V' ? ':Linediff<cr>' : 'D'

" vim-matchup
let g:matchup_surround_enabled = 1
let g:matchup_transmute_enabled = 1
let g:matchup_matchparen_offscreen = {}
let g:matchup_motion_keepjumps = 1
let g:matchup_matchpref = { 'html': { 'nolists': 1 } }
" Note: matchparen must be enabled for transmutation to work (useful for html)
au vimrc FileType vim,lua,zsh,c,cpp let b:matchup_matchparen_enabled = 0
map <tab> <plug>(matchup-%)

for v in ['g', ']', '[', 'z', 'a', 'i']
    exe 'omap '.v.'m <plug>(matchup-'.v.'%)'
endfor
for v in ['g', ']', '[', 'z']
    exe 'nmap '.v.'m <plug>(matchup-'.v.'%)'
    exe 'vmap '.v.'m <plug>(matchup-'.v.'%)'
endfor
for v in ['ds', 'cs']
    exe 'nmap '.v.'m <plug>(matchup-'.v.'%)'
endfor

fu! IsCommentaryOpFunc()
    return &operatorfunc ==? matchstr(maparg('<Plug>Commentary', 'n'),
                \ '\c<SNR>\w\+\ze()\|set op\%(erator\)\?func=\zs.\{-\}\ze<cr>')
endfu
let g:matchup_text_obj_linewise_operators = ['d', 'y', 'c', 'v', 'g@,IsCommentaryOpFunc()']

" lion.vim
let g:lion_squeeze_spaces = 1

" goyo.vim
nno <silent> _ :<c-u>Goyo<cr>
let g:goyo_height = '100%'
let g:goyo_width = 160

" splitjoin.vim
let g:splitjoin_split_mapping = 'gj'
let g:splitjoin_join_mapping = 'gk'

" vim-exchange
nmap t <Plug>(Exchange)
xmap t <Plug>(Exchange)
nmap tu <Plug>(ExchangeClear)
nmap T <Plug>(ExchangeLine)

" targets.vim
let g:targets_jumpRanges = ''
au vimrc User targets#mappings#user call targets#mappings#extend({
            \ 's': { '': [{'d':','}, {'d':'.'}, {'d':';'}, {'d':':'}, {'d':'+'}, {'d':'-'},
            \             {'d':'='}, {'d':'~'}, {'d':'_'}, {'d':'*'}, {'d':'#'}, {'d':'/'},
            \             {'d':'\'}, {'d':'|'}, {'d':'&'}, {'d':'$'}] },
            \ "'": {'quote': [{'d':"'"}, {'d':'"'}, {'d':'`'}]},
            \ })

if has('nvim-0.5')
    com! -bar CheckLsp lua print(vim.inspect(vim.lsp.buf_get_clients()))
    com! -bar RestartLsp call <sid>restartLsp()

    fu! s:restartLsp()
        lua vim.lsp.stop_client(vim.lsp.get_active_clients())
        edit
    endfu

    pa diagnostic-nvim
    let g:diagnostic_insert_delay = 1
    let g:diagnostic_virtual_text_prefix = 'âœ˜'
    let g:diagnostic_enable_virtual_text = 1

    pa completion-nvim
    set completeopt=menuone,noinsert
    let g:completion_chain_complete_list = [
                \ {'complete_items': ['lsp']},
                \ {'mode': '<c-p>'},
                \ {'mode': '<c-n>'}
                \ ]
    let g:completion_auto_change_source = 1
    let g:completion_trigger_keyword_length = 1
    let g:completion_enable_auto_signature = 0
    let g:completion_enable_auto_hover = 0
    let g:completion_confirm_key = "\<c-i>"
    ino <c-j> <c-n>
    ino <c-k> <c-p>
    ino <c-l> <cmd>lua require'snippets'.expand_at_cursor()<cr>

    pa nvim-lsp
    luafile ~/.vim/lua/my/lsp.lua

    pa snippets.nvim
    luafile ~/.vim/lua/my/snippets.lua
endif
" Init {{{2
sil! colo dune
if has('vim_starting')
    set background=light
endif

let vimrc_local = expand('<sfile>:p:h')..'/local.vim'
if filereadable(vimrc_local)
    exe 'source' vimrc_local
endif
"}}}2
