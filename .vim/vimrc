syntax enable
filetype plugin indent on

if has('nvim')
    set rtp^=~/.vim
    set rtp+=~/.vim/after
    let &packpath = &runtimepath
endif

if has('nvim')
    " !    - Save and restore all-caps global variables
    " '200 - Marks will be remembered for the last 200 files edited (also the number of `v:oldfiles` stored)
    " <50  - Contents of registers (up to 50 lines each) will be remembered
    " s10  - Items with contents occupying more then 10 KiB are skipped
    " h    - Disable the effect of 'hlsearch' when loading the shada file
    set shada=!,'200,<50,s10,h 
else
    set viminfo=!,'200,<50,s10,h
    set viminfofile=~/.viminfo
endif

if !has('nvim')
    " See :set termcap, :h t_ku, :h :set-termcap, and http://vim.wikia.com/wiki/Mapping_fast_keycodes_in_terminal_Vim
    set <a-h>=h
    set <a-j>=j
    set <a-k>=k
    set <a-l>=l
    if $TERM =~# '^\%(tmux\|screen\)'
        set ttymouse=xterm2
        " Make bracketed paste mode work inside tmux
        let &t_BE = "\033[?2004h"
        let &t_BD = "\033[?2004l"
        let &t_PS = "\033[200~"
        let &t_PE = "\033[201~"
    endif
    set ttyfast
endif

if has('nvim')
    set display=msgsep
    set inccommand=nosplit
else
    set display=lastline
endif

set lazyredraw
set ttimeout
set ttimeoutlen=10  " This must be a low value for <esc>-key not to be confused with an <a-â€¦> mapping
set mouse=a
set synmaxcol=250

if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif
" Show block cursor in Normal mode and line cursor in Insert mode
let &t_ti.="\<Esc>[2 q"
let &t_SI.="\<Esc>[6 q"
let &t_SR.="\<Esc>[4 q"
let &t_EI.="\<Esc>[2 q"
let &t_te.="\<Esc>[0 q"

set hidden
set confirm
set noswapfile nobackup
set undofile
set undodir=~/.vim/undo

set splitright
set splitbelow

set backspace=indent,eol,start
set nojoinspaces
set formatoptions+=1j

set autoindent
set shiftround
set smarttab
set expandtab
set shiftwidth=4
set tabstop=4
set softtabstop=-1

set hlsearch
set incsearch
set ignorecase
set infercase
set smartcase

set keywordprg=:help
set completeopt=menu
set complete=.,i,w,b

set wildmenu
set wildignorecase
set wildignore&vim
set wildignore+=build/*,*/node_modules/*

set foldtext=v:folddashes.getline(v:foldstart)
set foldmethod=marker
set foldlevelstart=0
set foldopen-=block

set nomodeline
set modelines=0

set shortmess&vim
set shortmess+=aTWIcFS
set shortmess-=s

set scrolloff=2
set sidescrolloff=2
set virtualedit=block
set nowrap

set listchars=tab:â€º\ ,trail:-,nbsp:âˆ…
set fillchars=fold:\ 

set signcolumn=no
set noshowcmd
set background=dark

if executable('rg')
    set grepprg=rg\ -i\ --vimgrep
else
    set grepprg=grep\ --line-number\ --with-filename\ --recursive\ -I\ $*\ /dev/null
endif
set grepformat=%f:%l:%c:%m

"
" Status line
" TODO: why does buf_diagnostics_count() sometimes return nil??
"
set laststatus=2
set noshowmode
if has('nvim-0.5')
    lua <<
    _G.lsp_statusline_no_errors = function ()
        if vim.tbl_isempty(vim.lsp.buf_get_clients(0)) then
            return ''
        end
        local errors = vim.lsp.util.buf_diagnostics_count('Error') or 0
        local warnings = vim.lsp.util.buf_diagnostics_count('Warning') or 0
        if errors == 0 and warnings == 0 then
            return 'âœ”'
        end
        return ''
    end
    _G.lsp_statusline_has_errors = function ()
        if vim.tbl_isempty(vim.lsp.buf_get_clients(0)) then
            return ''
        end
        local errors = vim.lsp.util.buf_diagnostics_count('Error') or 0
        local warnings = vim.lsp.util.buf_diagnostics_count('Warning') or 0
        if errors > 0 or warnings > 0 then
            return 'âœ˜'
        end
        return ''
    end
.
    fu MyStatusLineNeovim() abort
        return  MyStatusLine()..' '..
                    \"%3*%{v:lua.lsp_statusline_no_errors()}%*"..
                    \"%4*%{v:lua.lsp_statusline_has_errors()}%*"
    endfu
    set statusline=%!MyStatusLineNeovim()
else
    set statusline=%!MyStatusLine()
endif

fu MyStatusLine() abort
    return "%1*%{!&modifiable?'  X ':&ro?'  RO ':''}
                \%2*%{&modified?'  + ':''}
                \%* %f %5*%{session#status()}%*"
endfu

"
" Tab line
"
set showtabline=1
set tabline=%!MyTabLine()

fu MyTabLine()
    let s = ''
    for i in range(1, tabpagenr('$'))
        let s .= i == tabpagenr() ? '%#TabLineSel#' : '%#TabLine#'
        let s .= '%'.i.'T %{MyTabLabel('.i.')}'
    endfor
    return s.'%#TabLineFill#%T'
endfu

fu MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let modified = ''
    for b in buflist
        if getbufvar(b, '&modified')
            let modified = '+ '
            break
        endif
    endfor
    let name = fnamemodify(bufname(buflist[tabpagewinnr(a:n) - 1]), ':t:s/^$/[No Name]/')
    return modified.name.' '
endfu

aug vimrc | au!
    au BufReadPre *
                \ let s = getfsize(expand('<afile>')) |
                \ if s > g:LargeFile || s == -2 |
                \   call <sid>large_buf(expand('<afile>:p')) |
                \ endif

    let g:LargeFile = 20*1024*1024 " 20MB

    fu s:large_buf(name)
        let b:my_large_file = 1
        syntax clear
        set ei=all
        let &backupskip .= ',' . a:name
        setl foldmethod=manual nofoldenable noswapfile noundofile
        aug large_buffer | au!
            au BufWinEnter <buffer> 
                        \ set ei&vim |
                        \ au! large_buffer |
                        \ aug! large_buffer
        aug END
    endfu

    au BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$") && &ft !~# 'commit' |
                \   exe "norm! g`\"" |
                \ endif

    " Auto-create parent directories. But not for URIs (paths containing "://").
    au BufWritePre,FileWritePre *
                \ if @% !~# '\(://\)' |
                \   call mkdir(expand('<afile>:p:h'), 'p') |
                \ endif

    au BufEnter *.txt
                \ if &buftype is# 'help' |
                \   setl scrolloff=0 |
                \   nno <buffer> q :q<cr> |
                \   nno <buffer> T <c-]> |
                \ endif

    au FileType * setl fo-=cro

    if exists('##TerminalWinOpen')
        au TerminalWinOpen * setl stl=%f
    elseif exists('##TerminalOpen')
        au TerminalOpen * setl stl=%f
    elseif exists('##TermOpen')
        au TermOpen * setl stl=%f
    endif

    " Warning: any BufWritePost autocmd after this will not get run when
    " writing vimrc, because sourcing the vimrc will clear the augroup
    au BufWritePost ~/.vim/vimrc so $MYVIMRC
    au BufWritePost ~/.vim/lua/* luafile <afile>
    au BufWritePost *tmux.conf   call system('tmux source-file '.expand('<afile>'))

    au BufRead,BufNewFile *.metal    set ft=glsl
    au BufRead,BufNewFile *.fnl      set ft=clojure
    au BufRead,BufNewFile *tmux.conf set ft=tmux

    if has('nvim-0.5')
        au TextYankPost * sil! lua require'vim.highlight'.on_yank('DiffAdd')
    endif

    au CursorMoved * call HlSearch()
    au InsertEnter * call StopHL()

    fu HlSearch()
        " bail out if cursor is at top/bottom of window
        let wininfo = getwininfo(win_getid())[0]
        let lnum = getcurpos()[1]
        if lnum == wininfo.botline - &scrolloff || lnum == wininfo.topline + &scrolloff
            return
        endif

        let pos = match(getline('.'), @/, col('.') - 1) + 1
        if pos != col('.')
            call StopHL()
        endif
    endfu

    fu StopHL()
        if !v:hlsearch || mode() !=# 'n'
            return
        endif
        sil call feedkeys("\<Plug>(StopHL)", 'm')
    endfu

    no <silent> <Plug>(StopHL) :<C-U>nohlsearch<cr>
    no! <expr> <Plug>(StopHL) execute('nohlsearch')[-1]

    if executable('fasd') && exists('*jobstart')
        au BufReadPost * call s:fasd_update()
        fu s:fasd_update() abort
            if empty(&buftype) || &ft is# 'dirvish'
                call jobstart(['fasd', '-A', expand('%:p')])
            endif
        endfu
    endif
aug END

if !exists('s:SID')
    fu s:SID() abort
        return str2nr(matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$'))
    endfu
    let s:SID = printf('<SNR>%d_', s:SID())
    delfu s:SID
endif

com! -bar -range Diffusion <line1>,<line2> call my_fb#copy_diffusion_url()

com! -bar -nargs=* -complete=file_in_path Grep call <sid>grep(<f-args>)

fu s:grep(...) abort
    if a:0 == 0
        return
    endif
    let cmd = 'rg -i --vimgrep '.shellescape(a:1)
    if a:0 > 1
        let cmd .=  ' '.shellescape(expandcmd(a:2))
    endif
    " could also populate the quickfix list, and hide it?
    exe "lua require'my.isearch'.grep([[".cmd."]])"
endfu

com! -bar -nargs=1 PackInstall call <sid>packInstall(<q-args>)

fu s:packInstall(url)
    let url = a:url
    if url =~ '/$'
        let url = url[:-2]
    endif
    if url !~ '.git$'
        let url .= '.git'
    endif
    let repo = substitute(url, '^.*/\([^/]\+\)/\?\.git$', '\1', '')
    if strlen(repo) is strlen(url)
        echomsg 'regex failed'
        return
    endif
    " FIXME: git expands the tilde
    let cmd = printf('git submodule add --depth 1 --name "%s" -- %s ~/.vim/pack/third-party/start/%s', repo, shellescape(url), repo)
    exe '!(cd ~ && '.cmd.')'
endfu

let mapleader = "\<s-f5>"
let maplocalleader = "\<s-f6>"

no j gj
no k gk
nno <c-e> <c-e><c-e>
nno <c-y> <c-y><c-y>
xno < <gv
xno > >gv
nno s "_s
nno Z zzzH
xno Z zzzH
nno <silent> p :<c-u>call <sid>paste(0)<cr>
nno <silent> P :<c-u>call <sid>paste(1)<cr>

fu s:paste(cap)
    const p = a:cap ? 'P' : 'p'
    if getreg('"') =~ "\n"
        exe "keepj norm! "..p.."mx=']`x"
    else
        exe "norm! "..p
    endif
endfu

nno ; :
xno ; :
nno : ;
xno : ;

nno Q @q
no Y y$
no H ^
no L $
nno <c-p> <c-i>
nno <silent> <home> :<c-u>keepj norm! gg<cr>
nno <silent> <end> :<c-u>keepj norm! G<cr>
nno <silent> <pageup> <pageup>:keepj norm! H<cr>
nno <silent> <pagedown> <pagedown>:keepj norm! L<cr>

" TODO: keepjumps for /?`'
no  <silent> (  :<c-u>keepj norm! H<cr>
no  <silent> )  :<c-u>keepj norm! L<cr>
nno <silent> M  :<c-u>keepj norm! M<cr>
nno <silent> {  :<c-u>keepj norm! {<cr>
nno <silent> }  :<c-u>keepj norm! }<cr>
nno <silent> gg :<c-u>keepj norm! gg<cr>
nno <silent> G  :<c-u>keepj norm! G<cr>
nno <silent> n  :<c-u>keepj norm! nzzzv<cr>
nno <silent> N  :<c-u>keepj norm! Nzzzv<cr>

nno <silent> * ms:keepj norm! *<cr>zzzv
nno <silent> # ms:keepj norm! #<cr>zzzv
xno <silent> * "vyms:let @/='<c-r>v'<bar>keepj norm! n<cr>zzzv
xno <silent> # "vyms:let @/='<c-r>v'<bar>keepj norm! N<cr>zzzv
nno <silent> c* ms:let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>cgn
nno <silent> c# ms:let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>cgN

nno <silent> g/ :<c-u>let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>:set hls<cr>
nno <silent> <rightmouse> <leftmouse>:<c-u>let @/='\<<c-r>=expand("<cword>")<cr>\>'<cr>:set hls<cr>

" TODO: keepj
nno g= ms'[=']`s
nno <space>= H=L``
nno g<c-v> `[v`]
nno gV     '[V']

no! <a-h> <left>
no! <a-l> <right>
no! <a-j> <c-left>
no! <a-k> <c-right>

nno <c-l> <c-w>l
nno <c-h> <c-w>h
nno <c-j> <c-w>j
nno <c-k> <c-w>k

nno <a-l> <c-w>L
nno <a-h> <c-w>H
nno <a-j> <c-w>J
nno <a-k> <c-w>K

nno <silent> ]b :<c-u>bnext<cr>
nno <silent> [b :<c-u>bprev<cr>
nno <silent> [t :<c-u>tabprev<cr>
nno <silent> ]t :<c-u>tabnext<cr>
nno <silent> ]n /\v^[<\|=>]{7}<cr>
nno <silent> [n ?\v^[<\|=>]{7}<cr>
xno <silent> ]n /\v^[<\|=>]{7}<cr>
xno <silent> [n ?\v^[<\|=>]{7}<cr>

nno <expr> [e <sid>move_line_setup('up')
nno <expr> ]e <sid>move_line_setup('down')

fu s:move_line_setup(dir) abort
    let s:move_line = {'dir': a:dir}
    let &opfunc = s:SID .. 'move_line'
    return 'g@l'
endfu

" FIXME: v:count1 doesn't work if indenting
fu s:move_line(_) abort
    let dir = s:move_line.dir
    keepj norm! m`
    exe 'move' (dir is# 'up' ? '--' : '+') .. v:count1
    keepj norm! =``
endfu

nno <silent> [a :<c-u>call <sid>jump_arg(0)<cr>
nno <silent> ]a :<c-u>call <sid>jump_arg(1)<cr>

fu s:jump_arg(forward)
    let flags = (a:forward ? '' : 'b').'W'
    call searchpair('[({[]', ',', '[]})]', flags, 's:isCursorInStringOrComment()')
endfu

fu s:isCursorInStringOrComment()
    let syn = synIDattr(synID(line('.'), col('.'), 0), 'name')
    return syn =~? 'string' || syn =~? 'comment'
endfu

nno <silent> ]q :<c-u><c-r>=v:count1<cr>cnext<cr>zz
nno <silent> [q :<c-u><c-r>=v:count1<cr>cprevious<cr>zz
nno <silent> ]Q :<c-u>cnfile<cr>zz
nno <silent> [Q :<c-u>cpfile<cr>zz
nno <silent> ]l :<c-u><c-r>=v:count1<cr>lnext<cr>zz
nno <silent> [l :<c-u><c-r>=v:count1<cr>lprevious<cr>zz
nno <silent> ]L :<c-u>lnfile<cr>zz
nno <silent> [L :<c-u>lpfile<cr>zz

if has('nvim-0.5')
    no <silent> <space>o <cmd>lua require'my.isearch'.search_oldfiles()<cr>
    no <silent> <space>b <cmd>lua require'my.isearch'.search_buffers()<cr>
    no <silent> <space>f <cmd>lua require'my.isearch'.search_files()<cr>
endif

no <silent> <space>d :<c-u>BD<cr>
no <silent> <space>D :<c-u>bd<cr>
no <silent> <space>q :<c-u>b#<cr>

no <silent> <space>gd :<c-u>Diffusion<cr>
no <silent> <space>gl :<c-u>call my_find#hg_commit()<cr>

nno <space>a :<c-u>Grep<space>
xno <space>a "vy:Grep <c-r>v
xno <space>m :<c-u>make<cr>

no <silent> <space>ev :<c-u>edit ~/.vim/vimrc<cr>
no <silent> <space>el :<c-u>edit ~/.vim/lua/my<cr>
no <silent> <space>ez :<c-u>edit ~/.zshrc<cr>
no <silent> <space>ec :<c-u>edit ~/.vim/pack/mine/opt/gruvburn/gruvburn.colortemplate<cr>
no <silent> <space>en :<c-u>edit ~/notes/notes.md<bar>set bh=wipe<cr>
no <silent> <space>et :<c-u>edit ~/.config/tmux/tmux.conf<cr>
no <silent> <space>ea :<c-u>edit ~/.config/alacritty/alacritty.yml<cr>

cno <c-p> <up>
cno <c-n> <down>
cno <c-j> <c-g>
cno <c-k> <c-t>
cno <c-o> <c-r>=expand("%:t:r")<cr>

nno <silent> cd :<c-u>cd %:h \| pwd<cr>
nno <space>w :<c-u>w !sudo tee % >/dev/null<cr>
nno <silent> <space>t :<c-u>tabedit<cr>
no  <silent> <space>y y:<c-u>call my_fb#yank(@0)<cr>

nno <space>s :<c-u>%s///<left>a<bs>

nno 'e 2g;zz
xm <expr> gd mode() is# 'V' ? 'ygvgcP' : 'gd'

cnorea <expr> man getcmdtype() == ":" && getcmdline() == 'man' ? 'Man' : 'man'
" TODO: immediately expand
ca ~? ~/

nno <silent> <space>v V:<c-u>call <sid>eval()<cr>
xno <silent> <space>v :<c-u>call <sid>eval()<cr>

fu s:eval() abort
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    if line_start != line_end
        echohl ErrorMsg | echo "can't do multiline selection" | echohl None
        return
    endif
    let lines = getline(line_start, line_end)
    if empty(lines) | return | endif
    let line = lines[0][column_start-1:column_end-1]
    if empty(line) | return | endif
    if &ft is# 'vim'
        let res = eval(line)
    elseif &ft is# 'lua'
        " FIXME: null characters
        let res = luaeval('vim.inspect(' .. line .. ')')
    elseif &ft =~# 'z\?sh'
        let res = system(line)
    elseif &ft =~# 'javascript'
        " TODO
        return
    else
        return
    endif
    call setline('.', getline('.')[0:column_end] .. ' = ' .. trim(res))
endfu

ino <silent> <c-l> <c-r>=<sid>insert_log()<cr>

fu s:insert_log()
    if &ft is# 'javascript'
        call feedkeys("console.log()\<left>")
        return ''
    elseif &ft is# 'lua'
        call feedkeys("print(vim.inspect())\<left>\<left>")
        return ''
    elseif &ft is# 'reason'
        call feedkeys('Js.log();\<left>\<left>')
        return ''
    elseif &ft is# 'vim'
        return 'echom '
    endif
endfu

fu s:map_change_option(...)
  let [key, opt] = a:000[0:1]
  let op = get(a:, 3, 'set '.opt.'!')
  exe 'nno <silent> co'.key.' :'.op.'<cr>'
endfu

call s:map_change_option('n', 'number')
call s:map_change_option('c', 'cursorline')
call s:map_change_option('b', 'background', 'let &background = &background == "dark" ? "light" : "dark"<bar>redraw')
call s:map_change_option('w', 'wrap')
call s:map_change_option('l', 'hlsearch')

"
" adapted from justinmk's init.vim
"
xno <expr> I (mode()=~#'[vV]'?'<C-v>^o^I':'I')
xno <expr> A (mode()=~#'[vV]'?'<C-v>0o$A':'A')

nno gqax :%!tidy -q -i -xml -utf8<cr>
nno gqah :%!tidy -q -i -ashtml -utf8<cr>
nno gqaj :%!python -m json.tool<cr>
nno gwaj :call append('$', json_encode(eval(join(getline(1,'$')))))<cr>'[k"_dVgg:%!python -m json.tool<cr>

nno / ms/

nno <silent> g> :set nomore<bar>echo repeat("\n",&cmdheight)<bar>40messages<bar>set more<CR>

"
" adapted from lacygoill's vimrc
"
nno <expr> <space>. <sid>repeat_last_edit_on_last_changed_text()

fu s:repeat_last_edit_on_last_changed_text() abort
    " put the last changed text inside the search register, so that we can refer
    " to it with the text-object `gn`
    let changed = getreg('"', 1, 1)
    if empty(changed) | return | endif
    call map(changed, {_,v -> escape(v, '\')})
    if len(changed) == 1
        let pat = changed[0]
    else
        " can't join with real newlines: they would be translated as NULs in the search register
        " we need to join with the *atom* `\n`
        let pat = changed->join('\n')
    endif
    call setreg('/', '\V'..pat, 'c')
    set hls
    return "cgn\<c-@>"
    "          â”œâ”€â”€â”€â”€â”˜
    "          â”” insert the previously inserted text and stop insert
endfu

xno <silent> in :<c-u>call <sid>textobj_number(v:false)<cr>
ono <silent> in :<c-u>call <sid>textobj_number(v:false)<cr>

" same thing, but includes possible whitespace after the number
xno <silent> an :<c-u>call <sid>textobj_number(v:true)<cr>
ono <silent> an :<c-u>call <sid>textobj_number(v:true)<cr>

fu s:textobj_number(around) abort
    let stopline = line('.')
    let pat = '\%('..s:get_patnum()..'\)'..(a:around ? '\s*' : '')
    " move cursor to end of number
    if !search(pat, 'ceW', stopline)
        return
    endif

    " start visual selection from end of number
    norm! v

    " select back to start of number
    call search(pat, 'bcW', stopline)
    " clear command-line when pressing `.` (e.g. `dan .`)
    echo
endfu

fu s:get_patnum() abort
    let sign = '[-+]\='
    let decimal = '\d\+\.\=\d*'
    let fraction = '\.\d\+'
    let exponent = '[eE]'..sign..'\d\+'
    let number = printf('%s\%%(%s\|%s\)\%%(%s\)\=', sign, decimal, fraction, exponent)

    let binary = '0b[01]\+'
    let hex = '0x\x\+'

    " the order matters; keep `number` at the end
    let pat = binary..'\|'..hex..'\|'..number
    return pat
endfu

" text-object: inner line
ono <silent> il :<c-u>norm! _vg_<cr>

" search only in visual selection
xno <silent> / :<c-u>call <sid>visual_slash()<cr>

fu s:visual_slash() abort
    if line("'<") == line("'>")
        call feedkeys('gv/', 'in')
    else
        " Do not reselect the visual selection with `gv`.{{{
        "
        " It could make move the end of the selection when you type some pattern
        " which matches inside.  That's not what we want.
        " We want to search  in the last visual selection as  it was defined; we
        " don't want to redefine it in the process.
        "}}}
        call feedkeys('/\%V', 'in')
    endif
endfu

" repeat last edit on all the visually selected lines with dot
xno <silent> . :norm! .<cr>

com! -bar DiffOrig echo s:diff_orig()

fu s:diff_orig() abort
    let cole_save = &l:conceallevel
    setl conceallevel=0

    let tempfile = tempname()..'/Original File'
    exe 'vnew '..tempfile
    setl buftype=nofile nobuflisted noswapfile nowrap

    sil 0r ++edit #
    keepj $d_
    setl nomodifiable readonly

    diffthis
    nno <buffer><expr><nowait><silent> q reg_recording() isnot# '' ? 'q' : ':<c-u>q<cr>'
    let &filetype = getbufvar('#', '&ft')

    let s:tmp_partial = function('s:diff_orig_restore_settings', [cole_save])
    aug diff_orig_restore_settings
        au! * <buffer>
        au BufWipeOut <buffer>  call timer_start(0, s:tmp_partial)
    aug END

    exe winnr('#')..'windo diffthis'
    return ''
endfu

fu s:diff_orig_restore_settings(conceallevel,_) abort
    exe 'setl conceallevel='..a:conceallevel
    diffoff!
    norm! zvzz
    aug! diff_orig_restore_settings
    unlet s:tmp_partial
endfu

"
" adapted from junegunn's vimrc
"
omap <silent> ac :<C-U>call <SID>inner_comment(0)<CR>

function! s:inner_comment(vis)
    if synIDattr(synID(line('.'), col('.'), 0), 'name') !~? 'comment'
        return
    endif

    let origin = line('.')
    let lines = []
    for dir in [-1, 1]
        let line = origin
        let line += dir
        while line >= 1 && line <= line('$')
            execute 'normal!' line.'G^'
            if synIDattr(synID(line('.'), col('.'), 0), 'name') !~? 'comment'
                break
            endif
            let line += dir
        endwhile
        let line -= dir
        call add(lines, line)
    endfor

    execute 'normal!' lines[0].'GV'.lines[1].'G'
endfunction

" Disabled Vim plugins
let g:loaded_getscriptPlugin = 1
let g:loaded_logiPat = 1
let g:loaded_rrhelper = 1
let g:loaded_tarPlugin = 1
let g:loaded_vimballPlugin = 1
let g:loaded_vimball = 1
let g:loaded_zipPlugin = 1
let g:loaded_netrwPlugin = 1
let g:loaded_matchit = 1

let g:did_install_default_menus = 1 " $VIMRUNTIME/menu.vim

if has('nvim')
    let g:loaded_python_provider = 0
    let g:loaded_perl_provider = 0
    let g:loaded_ruby_provider = 0
    let g:loaded_node_provider = 0
endif

" vim-prettier
" packadd vim-prettier
let g:prettier#autoformat = 1

" vim-flow
let g:flow#enable = 0
let g:flow#timeout = 8
let g:flow#errjmp = 0

" vim-reasonml
let g:merlin_disable_default_keybindings = 1
let g:merlin_split_method = "never"

" vim-colortemplate
packadd vim-colortemplate
let g:colortemplate_no_mappings = 0
let g:colortemplate_source_comment = 0
let g:colortemplate_toolbar = 0
au vimrc BufWritePost *.colortemplate ColortemplateAll! | exe (has_key(g:, 'colors_name') ? 'colo ' .. g:colors_name : '')
com! -bar HiTest runtime syntax/hitest.vim
com! -bar Syn call colortemplate#syn#toggle()

" vim-qf
nm <c-n> <Plug>(qf_qf_toggle)
let g:qf_auto_quit = 0
let g:qf_auto_resize = 0
let g:qf_mapping_ack_style = 1

" vim-dirvish
let g:dirvish_mode = ':sort ,^.*/,'
au vimrc StdinReadPost * let s:has_stdin = 1
au vimrc VimEnter *
            \ if !argc() && !has_key(s:, 'has_stdin') |
            \   silent! Dirvish |
            \ endif

" vim-bufkill
let g:BufKillCreateMappings = 0

" vim-linediff
let g:linediff_buffer_type = 'scratch'
xno <expr> D mode() is# 'V' ? ':Linediff<cr>' : 'D'

" vim-matchup
let g:matchup_surround_enabled = 1
let g:matchup_transmute_enabled = 1
let g:matchup_matchparen_offscreen = {}
let g:matchup_motion_keepjumps = 1
au vimrc FileType * let b:matchup_matchparen_enabled = 0
map <tab> <plug>(matchup-%)

for v in ['g', ']', '[', 'z', 'a', 'i']
    exe 'omap '.v.'m <plug>(matchup-'.v.'%)'
endfor
for v in ['g', ']', '[', 'z']
    exe 'nmap '.v.'m <plug>(matchup-'.v.'%)'
    exe 'vmap '.v.'m <plug>(matchup-'.v.'%)'
endfor
for v in ['ds', 'cs']
    exe 'nmap '.v.'m <plug>(matchup-'.v.'%)'
endfor

fu IsCommentaryOpFunc()
    return &operatorfunc ==? matchstr(maparg('<Plug>Commentary', 'n'),
                \ '\c<SNR>\w\+\ze()\|set op\%(erator\)\?func=\zs.\{-\}\ze<cr>')
endfu
let g:matchup_text_obj_linewise_operators = ['d', 'y', 'c', 'v', 'g@,IsCommentaryOpFunc()']

" rust.vim
" let g:rustfmt_autosave = 1

" goyo.vim
nno <silent> _ :<c-u>Goyo<cr>

" splitjoin.vim
let g:splitjoin_split_mapping = 'gj'
let g:splitjoin_join_mapping = 'gk'

" undotree
nno <silent> U :<c-u>UndotreeToggle<cr>

if has('nvim-0.5')
    com! -bar CheckLsp lua print(vim.inspect(vim.lsp.buf_get_clients()))
    com! -bar RestartLsp call <sid>restartLsp()

    fu s:restartLsp()
        lua vim.lsp.stop_client(vim.lsp.get_active_clients())
        edit
    endfu

    packadd nvim-lsp
    luafile ~/.vim/lua/my/lsp.lua
endif

packadd! gruvburn
sil! colo gruvburn

" source local config
let vimrc_local = expand('<sfile>:p:h')..'/local.vim'
if filereadable(vimrc_local)
    exe 'source' vimrc_local
endif
